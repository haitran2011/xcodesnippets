<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>swift-tableviewcontroller</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import KitKap
import UIKit

class MyViewController: UIViewController {
    
    // =========================================================================
    // Enums/Structs
    // =========================================================================
    
    private struct Const {
        static let MyCell = "MyCell"
    }
    
    // =========================================================================
    // Vars
    // =========================================================================
    
    private var viewModel: MyViewModel?
    private weak var rootDelegate: RootViewControllerDelgate?
    
    var tableView = UITableView(frame: CGRectZero, style: UITableViewStyle.Plain)
    
    // =========================================================================
    // Funcs - Overridden
    // =========================================================================
    
    convenience init(root: RootViewControllerDelgate?) {
        self.init(viewModel: MyViewModel(), root: root)
    }
    
    init(viewModel: MyViewModel, root: RootViewControllerDelgate?) {
        super.init(nibName: nil, bundle: nil)
        self.viewModel = viewModel
        self.rootDelegate = root
        setup()
        layout()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
    
    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    override func viewDidAppear(animated: Bool) {
        super.viewDidAppear(animated)
    }
    
    override func viewWillDisappear(animated: Bool) {
        super.viewWillDisappear(animated)
    }
    
    override func viewDidDisappear(animated: Bool) {
        super.viewWillDisappear(animated)
    }
    
    deinit { }
    
    // =========================================================================
    // Funcs - Private
    // =========================================================================
    
    private func setup() {
        // internal setup
        tableView.frame = view.frame
        view.addSubview(tableView)
        
        tableView.registerClass(MyCell.self, forCellReuseIdentifier: Const.MyCell)
        
        tableView.dataSource = self
        tableView.delegate = self
        tableView.keyboardDismissMode = .Interactive
        tableView.rowHeight = 35
        tableView.allowsSelection = false
    }
    
    private func layout() {
        // layout stuff
    }
    
    // =========================================================================
    // Funcs - Public
    // =========================================================================
    
//    func setup(&lt;#type#&gt;: &lt;#Type#&gt;) {
//        // setup after alloc/init
//    }
}

extension MyViewController: MyViewModelDelegate {
    func doSomething() { }
}


// =============================================================================
// MARK: - Table View
// =============================================================================

extension MyViewController: UITableViewDataSource, UITableViewDelegate {
    
    func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {
        return 0
    }
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return 0
    }
    
    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat {
        return CGFloat.zero
    }
    
    func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -&gt; CGFloat {
        return CGFloat.zero
    }
    
    func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -&gt; UIView? {
        let header = UIView()
        return header
    }
    
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
        let cell = UITableViewCell()
        return cell
    }
    
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>E9A57CA0-FD7F-4CF2-BAF1-2E0F26602FBF</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>View controller with model stub and tableview.</string>
	<key>IDECodeSnippetTitle</key>
	<string>Swift - UIViewController - UITableView - model</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
