<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>swift-tableviewcontroller</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>class MyViewController: ViewController {

    // =========================================================================
    // Enums/Structs
    // =========================================================================
    
    private struct Const { }
    
    // =========================================================================
    // Vars
    // =========================================================================
    
    private var sectionHeaderViews: [SectionHeaderView] = []
    private var cellRowHeights: [[CGFloat]] = []
    
    private lazy var searchController: UISearchController = {
        let controller  = UISearchController(searchResultsController: nil)
        controller.searchBar.searchBarStyle = .Minimal
        controller.searchBar.tintColor = Colors.Primary.White
        controller.searchBar.placeholder = NSLocalizedString("FollowersFilterPlaceholder", comment: "")
        // controller.searchResultsUpdater = self
        controller.dimsBackgroundDuringPresentation = false
        return controller
    }()
    
    private lazy var refreshControl: UIRefreshControl = {
        let control = UIRefreshControl()
        control.addTarget(self, action: Selector("refreshAction"), forControlEvents: .ValueChanged)
        return control
    }()
    
    private lazy var tableView: UITableView = {
        let view = UITableView(frame: CGRectZero, style: .Grouped)
        view.keyboardDismissMode = .Interactive
        view.allowsSelection = true
        view.keyboardDismissMode = .None
        view.estimatedRowHeight = Consts.Layout.CellHeight
        // view.rowHeight = UITableViewAutomaticDimension
        view.backgroundColor = UIColor.boundLightGray()
        view.separatorColor = UIColor.boundLightGray()
        view.showsVerticalScrollIndicator = false
        view.addSubview(self.refreshControl)
        view.tableHeaderView = self.searchController.searchBar
        return view
    }()
    
    // =========================================================================
    // Funcs - Overridden
    // =========================================================================
    
    required init(persist: PersistentDataController?, root: RootViewControllerDelgate?) {
        super.init(persist: persist, root: root)
        setup()
        layout()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    deinit { }
    
    // =========================================================================
    // Funcs - Private
    // =========================================================================
    
    private func setup() {
        view.backgroundColor = UIColor.whiteColor()
        tableView.dataSource = self
        tableView.delegate = self
        tableView.registerClass(MyCell.self, forCellReuseIdentifier: String(MyCell))
        // definesPresentationContext = true
    }
    
    // =========================================================================
    // Funcs - Public
    // =========================================================================
}

extension MyViewController: UITableViewDataSource, UITableViewDelegate {
    
    func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {
        return 0
    }
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return 0
    }
    
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
        return tableView.dequeueReusableCellWithIdentifier(String(MyCell), forIndexPath: indexPath)
    }
    
    func tableView(tableView: UITableView, willDisplayCell cell: UITableViewCell, forRowAtIndexPath indexPath: NSIndexPath) {
        guard let cell = cell as? MyCell
    }
    
    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat {
        return cellRowHeights[indexPath.section][indexPath.row]
    }
    
    func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -&gt; Bool {
        return true
    }
    
    func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {
        if editingStyle == .Delete {
            tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: .Automatic)
        }
    }
}

extension MyViewController: UISearchResultsUpdating {
    func updateSearchResultsForSearchController(searchController: UISearchController) { }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>FAE673EE-F6CE-4227-9BE8-75ED6C8CF136</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>Table view controller stub containing search and refresh.</string>
	<key>IDECodeSnippetTitle</key>
	<string>Swift - Quick UITableViewController stub</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
